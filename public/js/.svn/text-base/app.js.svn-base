'use strict';

var app = angular.module('CasualStar', [
    'AdminCtrl',
    'UserCtrl',
    'ProfileCtrl',
    'BannerAdsCtrl',
    'AdminBannerAdsCtrl',
    'ActivityCtrl',
    'ServiceCtrl',
    'PaymentCtrl',
    'SettingsCtrl',
    'RegisterCtrl',
    'DashboardCtrl',
    'ExploreCtrl',
    'SubscriptionCtrl',
    'SuperSubsCtrl',
    'LiveCtrl',
    'ChatCtrl',
    'ngRoute',
    'ngSanitize',
    'ngFileUpload',
    'mwl.confirm',
    'credit-cards',
    'xeditable',
    'bw.paging',
    'luegg.directives',
    'ui.select',
    'ng-sortable',
    'datePicker',
    'infinite-scroll',
    'mwl.calendar',
    'slickCarousel'
    ], function($interpolateProvider) {
      $interpolateProvider.startSymbol('[[');
      $interpolateProvider.endSymbol(']]');
});

app.directive('validFile',function(){
  return {
    require:'ngModel',
    link:function(scope,el,attrs,ngModel){
      el.bind('change',function(){
        scope.$apply(function(){
          ngModel.$setViewValue(el.val());
          ngModel.$render();
        });
      });
    }
  }
});

app.directive('lightgallery', function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      if(scope.user.photos.length == 0) {
        scope.initLightGallery();
      } else {
        if(scope.$last) {
          scope.initLightGallery();
        }
      }
    }
  };
});

app.directive('elemReady', function( $parse ) {
  return {
    restrict: 'A',
    link: function( scope, elem, attrs ) {    
        elem.ready(function(){
          scope.geoReady();
        })
      }
    }
});

app.directive('enter', function () {
  return function (scope, element, attrs) {
    element.bind('keydown', function(e) {
      var code = e.keyCode || e.which;
      if ((code === 13) && (e.shiftKey)) {
        console.log('carriage');
      } else if(code === 13) {
        e.preventDefault();
        console.log('send');
        scope.$apply(function (){
          scope.$eval(attrs.enter);
        });
      }
    });
  };
});

app.directive('shift', function(){
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      elem[0].onkeydown = function(){
        scope.$apply(function (){
            scope.shiftPressed = true;
        });
      }
      elem[0].onkeyup = function(){
        scope.$apply(function (){
            scope.shiftPressed = false;
        });
      }
    }
  }
});

app.run(function(editableOptions) {
  editableOptions.theme = 'bs3';
});

app.filter('trusted', ['$sce', function ($sce) {
    return function(url) {
        if(url != undefined) {
            return $sce.trustAsResourceUrl(url);
        }
    };
}]);